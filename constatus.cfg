logfile = "test.log";
log-level = "debug";

# This setting selects what library to use to resize/scale the video
# images (when used).
# "regular" or "cairo" where cairo may give better results but may be
# a bit slower.
resize-type = "regular";

source = {
	id = "video4linux source";
	type = "v4l";
	device = "/dev/video0";
	width = 352;
	height = 288;
# If your camera can produce JPEG directly, then set this to true: it
# can give a speed-up for the http-streamer and for disk-streamer when
# producing mjpeg files.
	prefer-jpeg = true;
# When running this software on a raspberry pi with the native camera
# then this can work around an issue where the image gets all black or
# white after a bit.
	rpi-workaround = false;

#	type = "jpeg";
#	url = "http://192.168.64.139/image.jpg";
#	http-auth = "";

#	type : "rtsp";
#	url : "rtsp://iprobocam.marmitek.com/mpeg4";
# Default is retrieve the rtsp stream over UDP. If you see a lot of
# garbage, then you can switch tcp to true.
#	tcp : true;

#	id = "an MJPEG source";
#	type = "mjpeg";
#	url = "http://webcam.st-malo.com/axis-cgi/mjpg/video.cgi?resolution=352x288";

#	id = "a plugin source";
#	type = "plugin";
#	source-plugin-file = "source-plugins/demo.so.0.1";
#	source-plugin-parameter = "";

# -1 is no limit
	max-fps = -1.0;

# if all targets and http-servers want to use the resized picture, then
# resize it here at the source (for cpu efficiency)
# These values are number of pixels horizontal and vertical.
# -1 means: do not resize
	resize-width = 640;
	resize-height = 360;

# if the source is an https-URL with an invalid SSL certificate, then
# this switch lets you ignore that certificate
	ignore-cert = true;
}

http-server = (
# You can have 0 or more HTTP servers. They must all listen on other
# adapter/port pairs that are also not used by other software on the
# system.
		{
			id = "stream only, motion compatible";

# What IP-address/TCP port to listen on.
			listen-adapter = "0.0.0.0";
			listen-port = 8081;

# Use -1 for show all frames available (that would use more bandwidth).
# Value cannot be higher than the "max-fps" -setting in the source.
			fps = 5.0;
# For JPEG-frames, set the quality. 100 = best, 0 = worst
			quality = 75;

# For streams, maximum time (in seconds) before the connection is closed.
			time-limit = -1;

# If you wish to resize the pictures, then you can do so with these
# parameters (-1 for disable).
			resize-width = -1;
			resize-height = -1;

# When enabled, then the HTTP-server will send HTTP-headers but without
# waiting for the full request. That is how motion did it at some point.
			motion-compatible = true;

# When enabled, allows you to stop/start/etc services.
			allow-admin = false;

# For web-access to the archive of recordings.
			archive-access = false;
# Path to the recordings. Usually this is the same as the path used in
# the target(s) - see below.
			snapshot-dir = "./";

# Each HTTP-server can have 0 or more filters.
			filters = (
# The "text"-filter adds a text to the video stream.
# You can use the escapes as supported by "strftime" (see the man page).
# Other escapes:
# - $http-viewers$ number of viewers to the web server
# - $pixels-changed$ number of changed pixels as detected by the motion trigger
# Position can be lower/upper/center-left/center/right.
					{         
						type = "text";
						text = "%c";
						position = "lower-right";
					},
#					{         
# Like "text" but with a specific font, size, RGB color and pixel-location.
#						type = "scaled-text";
#						text = "%c";
# Font to use.
#						font = "Sans serif";
# Coordinate where to put the text
#						x = 123;
#						y = 123;
# Size of text in pixels.
#						font-size = 15;
# Color of the text.
#						r = 0;
#						g = 0;
#						b = 0;
#					},
# external filter plugin
#					{
#						type = "filter-plugin";
# filename
#						file = "filter-plugins/demo.so.0.1";
# any parameter for the plugin
#						par = "";
#					},
# horizontal mirror
#					{       
#						type = "h-mirror";
#					},        
# vertical mirror
					{       
						type = "v-mirror";
					}
# Convert an image to gray scale.
#					{       
#						type = "grayscale";
#					},        
# Other filters (FIXME):
#neighbour-noise-filter
#boost-contrast
#overlay
# Place an image over the recorded stream
#					{
#						type = "overlay";
#						picture = "overlay-test.png";
#						x = 10;
#						y = 10;
#					},
# Mask of anything not in the masking bitmap.
#					{       
#						type = "apply-mask";
#						selection-bitmap = "bitmap.pbm";
#					},
# Show only the parts that have moved.
#					{       
#						type = "motion-only";
#						selection-bitmap = "bitmap.pbm";
#						noise-factor = 32;
#					},
# Draw a box around the movements.
#					{
#						type = "marker";
#						mode = "invert";
#						selection-bitmap = "bitmap.pbm";
#						noise-factor = 32;
#					}
				);
		},
		{
			id = "admin interface";
			listen-adapter = "0.0.0.0";
			listen-port = 8082;
			fps = 5.0;
			quality = 75;
			time-limit = -1;
			resize-width = -1;
			resize-height = -1;
			motion-compatible = false;
			allow-admin = true;
			archive-access = true;
			snapshot-dir = "./";
			filters = (
					{         
						type = "text";
						text = "my webcam $http-viewers$ $pixels-changed$";
                                                position = "upper-left";
					},
					{         
						type = "text";
						text = "%c";
						position = "lower-right";
					}
				);
		}
	);

# these plugins can be used to store specific meta-data in
# generated files. you can let them generate e.g. $bla$
# escapes which you then can use in the add-text filter.
#meta-plugin = (
#	{
#		plugin-file = "meta-plugins/gps.so.0.1";
#		plugin-parameter = "localhost 2947";
#	}
#)

motion-trigger = (
	{
		id = "motion trigger(s)";

# While motion is detected, each pixel is first converted to grayscale.
# Then the difference with the previous recording is calculated.
# If the difference is bigger than the noise-factor, then the pixel is
# counted...
		noise-factor = 32;
# ..., then if the total number of pixels is >= the percentage of the
# pixels selected by pixels-changed-percentage, then motion is
# considered to be detected.
		pixels-changed-percentage = 0.6;
# Note that these two parameters are not used when the motion trigger
# plugin is selected.

# If the motion has stopped, how many frames to record extra.
		min-duration = 15;
# How many frames to ignore all motion after the previous event has
# stopped.
		mute-duration = 5;
# How many frames to record and store before the motion has started.
		pre-motion-record-duration = 15;

# At startup, how many frames to ignore before detecting motion.
		warmup-duration = 10;
# Limit the number of frames per second to process. Set to -1 to
# disable.
		max-fps = -1.0;

# One can use external plugins for detecting motion.
		trigger-plugin-file = "";
		trigger-plugin-parameter = "";

# A pgm file to mask which parts of the video frames to analyze.
		selection-bitmap = "";

# Zero or more filters that are applied before the frames are analyzed.
		filters-detection = [ ];

# Targets are the services that stream the frames to a disk-file.
# See the section "stream-to-disk" below for an explanation.
		targets = (
			{
				id = "motion output";
				path = "./";
				prefix = "motion-all-";
				quality = 75;
				restart-interval = 86400;
				fps = 5.0;
				override-fps = -1.0;
				format = "avi";
				stream-writer-plugin-file = "";
				stream-writer-plugin-parameter = "";
				exec-start = "";
				exec-cycle = "";
				exec-end = "";
				filters = (   
						{         
							type = "text";
							text = "my webcam $http-viewers$ $pixels-changed$";
							position = "upper-left"
						},        
						{         
							type = "text";
							text = "%c";
							position = "lower-right"
						}
					)
			}
		)
	}
)

# A service that writes the video stream that is recorded
# to disk.
stream-to-disk = (
# You can have 0 or more of these.
	{
		id = "write everything to disk";

# Path to store the recordings in.
		path = "./";
# Prefix for the filename.
		prefix = "all-";

# In case of JPEG, quality of the compression. 100 is best, 1 is worst.
		quality = 75;

# Split the file every restart-interval seconds.
		restart-interval = 86400;

# Limit a recording to this number of frames per second.
		fps = 5.0;
# This does not work yet, keep it on -1.0.
		override-fps = -1.0;

# Output format.
		format = "avi";
# Can be:
# - avi: (which is MJPEG underneath)
# - ffmpeg: use ffmpeg to compress the data. all format supported
#   by ffmpeg can be used. requires the following extra parameters:
#		ffmpeg-type = "flv";
#		ffmpeg-parameters = "";
# - plugin: use an external plugin to store the data
#		stream-writer-plugin-file = "";
#		stream-writer-plugin-parameter = "";
# - extpipe: send a YUV420 stream to a pipe
#   requires an extra parameter "cmd", e.g.:
#		cmd : "mencoder -demuxer rawvideo -rawvideo w=%w:h=%h:fps=%fps -ovc x264 -x264encopts preset=ultrafast -of lavf -o %f.mp4 - -fps %fps";
# - jpeg: store each frame as a seperate file
# - vnc: VNC video stream
#   requires two extra parameters:
#               listen-adapter = "0.0.0.0";
#               listen-port = 5901;

# Scripts to invoke at the start, at the end or when the file is
# rotated (exec-cycle).
		exec-start = "";
		exec-cycle = "";
		exec-end = "";

# Filters to apply. See descriptions at the http-server section.
		filters = (   
				{         
					type = "text";
					text = "%c";
					position = "lower-right"
				}
			)
	}
)

# Constatus can "loop back" the video data back into
# the Linux kernel so that other applications can monitor
# the same source as well.
#video-loopback = {
# device to loopback to
#	device = "/dev/video2";
# Limit the frame rate to this, -1.0 to disable.
#	fps = 15.0;
# Any filters you want to apply before the video data
# streams into the loopback device.
#	filters = (
#		)
#};
